name: "Test and Release"
on:
  pull_request:
  push:
    branches:
    - 'main'

env:
  golang-version: '1.16'
  kind-version: 'v0.11.1'
  kind-image: 'kindest/node:v1.22.0'

jobs:
  commit-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v4

  golang-lint:
    runs-on: ubuntu-latest
    name: Golang linter
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.42.1
          args: --timeout 10m0s

  generate:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
    name: Generate and format
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.golang-version }}
      - run: make --always-make generate && git diff --exit-code

  build-bundle-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Go environment
        uses: actions/setup-go@v2.1.4
        with:
          go-version: ${{ env.golang-version }}

      - name: Build Bundle Image
        run: make bundle-image

  e2e-tests:
    name: E2E tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.golang-version }}
      - name: Build images
        run: |
          make operator-image
      - name: Start KinD
        uses: engineerd/setup-kind@v0.5.0
        with:
          version: ${{ env.kind-version }}
          image: ${{ env.kind-image }}
          wait: 300s
      - name: Wait for cluster to finish bootstraping
        run: |
          kubectl wait --for=condition=Ready pods --all --all-namespaces --timeout=300s
          kubectl cluster-info
          kubectl get pods -A
      - name: Load images
        run: |
          kind load docker-image monitoring-stack-operator:$(cat VERSION)
      - name: Run tests
        run: go test ./test/e2e/...

  publish-olm-development:
    if: "github.ref == 'refs/heads/main'"
    runs-on: ubuntu-latest
    environment: quay
    steps:
      - uses: actions/checkout@v2

      - name: Set version
        id: version
        run: |
          version="$(cat VERSION)-$(date +%y%m%d%H%M%S)"
          echo "::set-output name=version::$version"

      - name: Publish
        uses: ./.github/olm-publish
        env:
          IMAGE_BASE: ${{ secrets.IMAGE_BASE }}
          VERSION: ${{ steps.version.outputs.version }}
          CHANNELS: development
        with:
          quay_login: ${{ secrets.QUAY_LOGIN }}
          quay_token: ${{ secrets.QUAY_TOKEN }}

  create-github-release:
    needs:
      - commit-lint
      - golang-lint
      - generate
      - build-bundle-image
      - e2e-tests
      - publish-olm-development
    runs-on: ubuntu-latest
    if: "github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, 'chore(release):')"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.REPOSITORY_PUSH_TOKEN }}

      - name: Extract release version
        id: release_version
        run: |
          commit_message='${{ github.event.head_commit.message }}'
          version=$(echo $commit_message | sed 's/chore(release)\: \(.*\)/\1/g')
          echo "::set-output name=release_as::$version"

      - name: Generate release notes
        run: |
          # Create the release notes for the Github release
          git config user.name rhobs-release-bot
          git config user.email release-bot@monitoring.rhobs.io
          npx standard-version -i RELEASE_BODY.md --release-as ${{ steps.release_version.outputs.release_as }} --skip.commit

      - name: Publish tag
        id: publish_tag
        run: |
          git push --follow-tags
          echo ::set-output name=tag_name::$(git describe HEAD --abbrev=0)

      - name: Create Github release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.REPOSITORY_PUSH_TOKEN }}
        with:
          release_name: ${{ steps.publish_tag.outputs.tag_name }}
          tag_name: ${{ steps.publish_tag.outputs.tag_name }}
          body_path: RELEASE_BODY.md
          # We always generate pre-releases and mark them as releases manually
          prerelease: true